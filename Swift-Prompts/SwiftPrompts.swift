//
//  SwiftPrompts.swift
//  ProjectName
//
//  Created by Gabriel Alvarado on 3/22/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class SwiftPrompts : NSObject {

    //// Drawing Methods

    public class func drawSwiftPrompt(frame frame: CGRect, backgroundColor: UIColor, headerBarColor: UIColor, bottomBarColor: UIColor, headerTxtColor: UIColor, contentTxtColor: UIColor, outlineColor: UIColor, topLineColor: UIColor, bottomLineColor: UIColor, dismissIconButton: UIColor, promptText: String, textSize: CGFloat, topBarVisibility: Bool, bottomBarVisibility: Bool, headerText: String, headerSize: CGFloat, imageHeight: CGFloat, topLineVisibility: Bool, bottomLineVisibility: Bool, outlineVisibility: Bool, dismissIconVisibility: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Constants
        let _outsideRect = CGRectMake(frame.minX + floor(frame.width * 0.01778 + 0.5),
                                      frame.minY + 9,
                                      floor(frame.width * 0.98667 + 0.5) - floor(frame.width * 0.01778 + 0.5),
                                      frame.height - 19)
        let _bottomBarRect = CGRectMake(frame.minX + floor(frame.width * 0.01778 + 0.5),
                                        frame.minY + frame.height - 51,
                                        floor(frame.width * 0.98667 + 0.5) - floor(frame.width * 0.01778 + 0.5),
                                        41)
        let _cornerRadius = 12 as CGFloat
        let _cornerRadii = CGSizeMake(_cornerRadius, _cornerRadius)
        let _promptTextRect = CGRectMake(frame.minX + 13,
                                         frame.minY + 56 + imageHeight + (imageHeight > 0 ? 10 : 0),
                                         frame.width - 26,
                                         frame.height - 109)
        let _topBarRect = CGRectMake(frame.minX + floor(frame.width * 0.01778 + 0.5),
                                     frame.minY + 9,
                                     floor(frame.width * 0.98667 + 0.5) - floor(frame.width * 0.01778 + 0.5),
                                     44)
        let _headerTextRect = CGRectMake(frame.minX + floor(frame.width * 0.05333 + 0.5),
                                         frame.minY + 17,
                                         floor(frame.width * 0.93778 + 0.5) - floor(frame.width * 0.05333 + 0.5),
                                         34)
        let _topLineRect = CGRectMake(frame.minX + 12,
                                      frame.minY + 53,
                                      frame.width - 23,
                                      1)
        let _bottomLineRect = CGRectMake(frame.minX + 12,
                                         frame.minY + frame.height - 52,
                                         frame.width - 23,
                                         1)
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: _outsideRect, cornerRadius: _cornerRadius)
        backgroundColor.setFill()
        rectanglePath.fill()


        if (outlineVisibility) {
            //// Rectangle 6 Drawing
            let rectangle6Path = UIBezierPath(roundedRect: _outsideRect, cornerRadius: _cornerRadius)
            outlineColor.setStroke()
            rectangle6Path.lineWidth = 3.5
            rectangle6Path.stroke()
        }


        if (bottomBarVisibility) {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(roundedRect: _bottomBarRect, byRoundingCorners: [UIRectCorner.BottomLeft, UIRectCorner.BottomRight], cornerRadii: _cornerRadii)
            rectangle2Path.closePath()
            bottomBarColor.setFill()
            rectangle2Path.fill()
        }


        //// Prompt Text Drawing
        let promptTextStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        promptTextStyle.alignment = NSTextAlignment.Center

        let promptTextFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Light", size: textSize)!, NSForegroundColorAttributeName: contentTxtColor, NSParagraphStyleAttributeName: promptTextStyle]

        let promptTextTextHeight: CGFloat = NSString(string: promptText).boundingRectWithSize(CGSizeMake(_promptTextRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: promptTextFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, _promptTextRect);
        
        // If there is no image, display the prompt text centered vertically in the prompt body rectangle
        // Otherwise; if there IS an image, display the text starting from the foot of the image (top aligned)
        let promptTextY = imageHeight == 0 ? _promptTextRect.minY + (_promptTextRect.height - promptTextTextHeight) / 2 : _promptTextRect.minY
        NSString(string: promptText).drawInRect(CGRectMake(_promptTextRect.minX, promptTextY, _promptTextRect.width, promptTextTextHeight), withAttributes: promptTextFontAttributes)
        CGContextRestoreGState(context)


        if (topBarVisibility) {
            //// Rectangle 3 Drawing
            let rectangle3Path = UIBezierPath(roundedRect: _topBarRect, byRoundingCorners: [UIRectCorner.TopLeft, UIRectCorner.TopRight], cornerRadii: _cornerRadii)
            rectangle3Path.closePath()
            headerBarColor.setFill()
            rectangle3Path.fill()
        }


        //// Header Text Drawing
        let headerTextStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        headerTextStyle.alignment = NSTextAlignment.Center

        let headerTextFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Light", size: headerSize)!, NSForegroundColorAttributeName: headerTxtColor, NSParagraphStyleAttributeName: headerTextStyle]

        let headerTextTextHeight: CGFloat = NSString(string: headerText).boundingRectWithSize(CGSizeMake(_headerTextRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: headerTextFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, _headerTextRect);
        NSString(string: headerText).drawInRect(CGRectMake(_headerTextRect.minX, _headerTextRect.minY + (_headerTextRect.height - headerTextTextHeight) / 2, _headerTextRect.width, headerTextTextHeight), withAttributes: headerTextFontAttributes)
        CGContextRestoreGState(context)


        if (topLineVisibility) {
            //// Rectangle 4 Drawing
            let rectangle4Path = UIBezierPath(rect: _topLineRect)
            topLineColor.setFill()
            rectangle4Path.fill()
        }


        if (bottomLineVisibility) {
            //// Rectangle 5 Drawing
            let rectangle5Path = UIBezierPath(rect: _bottomLineRect)
            bottomLineColor.setFill()
            rectangle5Path.fill()
        }


        //// Page-
        //// First
        //// Group 4
        if (dismissIconVisibility) {
            //// Shape 2 Drawing
            let shape2Path = UIBezierPath()
            shape2Path.moveToPoint(CGPointMake(frame.minX + 29.83, frame.minY + 27.57))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 28.13, frame.minY + 25.88))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 21.33, frame.minY + 32.68))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 14.53, frame.minY + 25.88))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 12.83, frame.minY + 27.57))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 19.63, frame.minY + 34.38))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 12.83, frame.minY + 41.18))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 14.53, frame.minY + 42.88))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 21.33, frame.minY + 36.07))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 28.13, frame.minY + 42.88))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 29.83, frame.minY + 41.18))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 23.03, frame.minY + 34.38))
            shape2Path.addLineToPoint(CGPointMake(frame.minX + 29.83, frame.minY + 27.57))
            shape2Path.closePath()
            shape2Path.miterLimit = 4;

            shape2Path.usesEvenOddFillRule = true;

            dismissIconButton.setFill()
            shape2Path.fill()
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
